@page "/pososejer"
@inject HttpClient Http;
@inject NavigationManager NavigationManager;

<h3>Pasos</h3>
<RadzenTemplateForm Data="@pasos">
    <div class="row">
        <div class="col-md-12">
            <RadzenFieldset Text="Agregar / Editar">
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Nombre" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox @bind-Value=@pasos.Nombre Placeholder="Nombre" style="width: 100%;" Name="CardNr" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Descripción" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox @bind-Value=@pasos.Descripcion Placeholder="Descripción" style="width: 100%;" Name="CardNr" />
                    </div>
                </div>
            </RadzenFieldset>
        </div>
    </div>
</RadzenTemplateForm>
<div class="row justify-content-center">
    <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
        <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Guardar" Click=@(args => Guardar()) />
        <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancelar" Click=@(args => Cancelar()) />
    </div>
</div>

<h3>Lista de Pasos</h3>
<RadzenFieldset Text=""> 
    <RadzenDataGrid @ref="ordersGrid" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" 
            Data="@pasoslist" TItem="PasosEjercicio">
            <Columns>
                <RadzenDataGridColumn Width="40px" TItem="PasosEjercicio" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                     <Template Context="data">
                        @(pasoslist.IndexOf(data) + 1)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="PasosEjercicio" Property="Nombre" Title="Nombre" Filterable="false">
                    <Template Context="pasos">
                        <p>@pasos.Nombre</p>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="PasosEjercicio" Property="Descripcion" Title="Descripción" Filterable="false">
                   <Template Context="pasos">
                        <p>@pasos.Descripcion</p>
                   </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Width="150px" TItem="PasosEjercicio" Property="IdPasos" Title="Opciones" Filterable="false" Sortable="false">
                    <Template Context="pasos">
                        <RadzenButton Click=@(args => Editar(pasos)) Text="" Icon="edit" ButtonStyle="ButtonStyle.Warning" />
                        <RadzenButton Click=@(args => Borrar(pasos.IdPasos)) Text="" Icon="delete" ButtonStyle="ButtonStyle.Danger"  />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
    </RadzenDataGrid>
</RadzenFieldset>
  

@code {
    RadzenDataGrid<PasosEjercicio> ordersGrid;
    public IList<PasosEjercicio> pasoslist { get; set; }
    private PasosEjercicio pasos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        pasos = new PasosEjercicio();
        pasoslist = new List<PasosEjercicio>();
        pasoslist = await Http.GetFromJsonAsync<List<PasosEjercicio>>("https://localhost:7184/api/Pasoses");
        pasoslist = pasoslist.ToList();
    }
    private void Editar(PasosEjercicio argEquip)
    {
        pasos = argEquip;
    }
    private async Task Borrar(int Pasosid)
    {
        await Http.DeleteAsync("https://localhost:7184/api/Pasoses/" + Pasosid);
        await Recargar();
    }
    protected async Task Cancelar()
    {
        await Recargar();
    }
    private async Task Recargar()
    {
        pasoslist = await Http.GetFromJsonAsync<List<PasosEjercicio>>("https://localhost:7184/api/Pasoses");
        pasoslist = pasoslist.ToList();
        pasos = new PasosEjercicio();
        StateHasChanged();
    }
    private async Task Guardar()
    {
        if (pasos.IdPasos == 0)
        {
            await Http.PostAsJsonAsync("https://localhost:7184/api/PasosEjercicios", pasos);
        }
        else 
        {
            await Http.PutAsJsonAsync("https://localhost:7184/api/PasosEjercicios/" + pasos.IdPasos, pasos);
        }
        await Recargar();
    }
}
