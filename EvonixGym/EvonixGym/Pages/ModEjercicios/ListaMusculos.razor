@page "/musculo"
@inject HttpClient Http;
@inject NavigationManager NavigationManager;

<h3>Musculos</h3>

<RadzenTemplateForm Data="@musculo">
    <div class="row">
        <div class="col-md-12">
            <RadzenFieldset Text="Agregar Musculo">
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Nombre" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox @bind-Value=@musculo.Nombre Placeholder="Nombre" style="width: 100%;" Name="CardNr" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Descripción" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox @bind-Value=@musculo.Descripcion Placeholder="Descripción" style="width: 100%;" Name="CardNr" />
                    </div>
                </div>
            </RadzenFieldset>
        </div>
    </div>
</RadzenTemplateForm>
<div class="row justify-content-center">
    <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
        <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Guardar" Click=@(args => Guardar()) />
        <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancelar" Click=@(args => Cancelar()) />
    </div>
</div>

<h3>Lista de Musculos</h3>
<RadzenFieldset Text=""> 
    <RadzenDataGrid @ref="ordersGrid" AllowFiltering="true" AllowPaging="true" PageSize="3" AllowSorting="true" 
            Data="@musculolist" TItem="Musculo">
            <Columns>
                <RadzenDataGridColumn Width="40px" TItem="Musculo" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                     <Template Context="data">
                        @(musculolist.IndexOf(data) + 1)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Musculo" Property="Nombre" Title="Nombre" Filterable="false">
                    <Template Context="musculo">
                        <p>@musculo.Nombre</p>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Musculo" Property="Descripcion" Title="Descripción" Filterable="false">
                   <Template Context="musculo">
                        <p>@musculo.Descripcion</p>
                   </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Width="150px" TItem="Musculo" Property="MusculoID" Title="Opciones" Filterable="false" Sortable="false">
                    <Template Context="musculo">
                        <RadzenButton Click=@(args => Editar(musculo)) Text="" Icon="edit" ButtonStyle="ButtonStyle.Warning" />
                        <RadzenButton Click=@(args => Borrar(musculo.IdMusculo)) Text="" Icon="delete" ButtonStyle="ButtonStyle.Danger"  />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
    </RadzenDataGrid>
</RadzenFieldset>
  

@code {
    RadzenDataGrid<Musculo> ordersGrid;
    public IList<Musculo> musculolist { get; set; }
    private Musculo musculo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        musculo = new Musculo();
        musculolist = new List<Musculo>();
        musculolist = await Http.GetFromJsonAsync<List<Musculo>>("https://localhost:7184/api/Musculos");
        musculolist = musculolist.ToList();
    }
    private void Editar(Musculo argMusculo)
    {
        musculo = argMusculo;
    }
    private async Task Borrar(int musculoid)
    {
        await Http.DeleteAsync("https://localhost:7184/api/Musculos/" + musculoid);
        await Recargar();
    }
    protected async Task Cancelar()
    {
        await Recargar();
    }
    private async Task Recargar()
    {
        musculolist = await Http.GetFromJsonAsync<List<Musculo>>("https://localhost:7184/api/Musculos");
        musculolist = musculolist.ToList();
        musculo = new Musculo();
        StateHasChanged();
    }
    private async Task Guardar()
    {
        if (musculo.IdMusculo == 0)
        {
            await Http.PostAsJsonAsync("https://localhost:7184/api/Musculos", musculo);
        }
        else 
        {
            await Http.PutAsJsonAsync("https://localhost:7184/api/Musculos/" + musculo.IdMusculo, musculo);
        }
        await Recargar();
    }
}
