@using EvonixGym.Modelos
@page "/cuestionario/{idEntrenador:int}/{tipo:int}"
@inject HttpClient Http;

  <RadzenCard class="m-3">
              <h3 class="h5">Crear Cuestionario</h3>
                <div class="d-flex flex-row">        
                   <RadzenTextBox placeholder="Nombre del cuestionario"  Class="w-300" Data= "@cuestionario.Nombre"  @bind-Value=cuestionario.Nombre/>
                   <RadzenTextBox placeholder="Desripcion"  Class="w-300" Data= "@cuestionario.Descripcion"  @bind-Value=cuestionario.Descripcion/>
                </div>
  </RadzenCard>
  <RadzenCard>
  <h3>Asignar Cliente</h3>
    <RadzenDropDown AllowClear="true" TValue="Cliente" Class="w-100" 
                                            Data=@(clientes)  TextProperty="Nombre"
                                           Change=@(args =>asignarCliente(args))  />
     @if(misClientes.Count > 0)
        {
            <span>Este cuestionario se asignara a:</span>
            @foreach(var c in misClientes)
            { 
                <li>@c.Nombre</li>
                 <RadzenButton Click=@(args => borrarCliente(@c)) Text="borrar" ButtonStyle="ButtonStyle.Danger" />
                
            }
        }
  </RadzenCard>
  <RadzenCard>
  <h3>Asignar Perimetros</h3>
    <RadzenDropDown AllowClear="true" TValue="Perimetro" Class="w-100" 
                                            Data=@(perimetros)  TextProperty="Nombre"
                                           Change=@(args =>asignarPerimetro(args))  />
     @if(misPerimetros.Count > 0)
        {
            
            @foreach(var c in misPerimetros)
            { 
                <li>@c.Nombre</li>
                 <RadzenButton Click=@(args => borrarPerimetro(@c)) Text="borrar" ButtonStyle="ButtonStyle.Danger" />
                
            }
        }
  </RadzenCard>
  <RadzenCard>
  <h3>Asignar Composicion</h3>
    <RadzenDropDown AllowClear="true" TValue="ComposicionCorporal" Class="w-100" 
                                            Data=@(composicionC)  TextProperty="Nombre"
                                           Change=@(args =>asignarComposicion(args))  />
     @if(misComposicionC.Count > 0)
        {
            
            @foreach(var c in misComposicionC)
            { 
                <li>@c.Nombre</li>
                 <RadzenButton Click=@(args => borrarComposicion(@c)) Text="borrar" ButtonStyle="ButtonStyle.Danger" />
                
            }
        }
  </RadzenCard>
    <ul>   
        @foreach (var p in preguntas)
        {
            @if (!p.Pregunta1.Equals(""))
            {
                <li>@p.Pregunta1</li>
                @if (p.imagenes != null)
                {
                    @foreach (var imageDataUrl in p.imagenes)
                    {
                        <img class="rounded m-1" src= "@imageDataUrl.Image" />
                            <a>@imageDataUrl.descripcion</a>
                    }
                }
            <RadzenButton Click=@(args => borrarPregunta(p)) Text="borrar" ButtonStyle="ButtonStyle.Danger" />
            }
        }
    </ul>

    <RadzenCard> 
         <h3>Nueva Pregunta</h3>
    <InputFile OnChange=" OnInputFileChange" multiple /> 
    <RadzenTextBox placeholder="Agregar link de video"  Class="w-300" Data= "@imageDataUrl.LinkVideo"  @bind-Value=imageDataUrl.LinkVideo/>
    <RadzenTextArea Class="w-100"  @bind-Value=imageDataUrl.descripcion placeholder="Descripcion de archivos"/>
    <input  placeholder="nueva pregunta.." @bind="pregunta.Pregunta1"/>
    <button type ="submit"@onclick="Guardar">Confirmar</button>
</RadzenCard>
<RadzenCard>
    <button type ="submit"@onclick="guardarCuestionario">Guardar Cuestionario</button>
</RadzenCard>


@code{

    [Parameter]
    public int idEntrenador { get; set; } = 0; 
    [Parameter]
    public int tipo { get; set; } = 0;

    private Cuestionario cuestionario = new Cuestionario();

    private List<Pregunta> preguntas = new();
    private List<Cliente> clientes = new();
    private List<Perimetro> perimetros = new();
    private List<Perimetro> misPerimetros = new();
    private List<ComposicionCorporal> composicionC = new();
    private List<ComposicionCorporal> misComposicionC = new();
    private List<Cliente> misClientes = new();
    private CuestionarioClientes cuestclientes = new();
    private Cliente cliente = new Cliente();
    private Pregunta pregunta = new Pregunta();
    private List<Archivo> imageDataUrls = new ();
    private Archivo imageDataUrl = new();
    private Perimetro perimetro = new Perimetro();
    private ComposicionCorporal cc = new ComposicionCorporal();

    protected override async Task OnInitializedAsync()
    {
        clientes = await Http.GetFromJsonAsync<List<Cliente>>("https://localhost:7184/api/Clientes");
        clientes = clientes.ToList();
        perimetros = await Http.GetFromJsonAsync<List<Perimetro>>("https://localhost:7184/api/Perimetroes");
        perimetros = perimetros.ToList();
        composicionC = await Http.GetFromJsonAsync<List<ComposicionCorporal>>("https://localhost:7184/api/ComposicionCorporals");
        composicionC = composicionC.ToList();


    }
    public void asignarCliente(Object o)
    {

        Cliente c = (Cliente) o;

        if (c != null && !misClientes.Contains(c))
        {
            misClientes.Add(c);
        }
        cliente = new Cliente();
    }
    public void asignarPerimetro(Object o)
    {

        Perimetro c = (Perimetro) o;

        if (c != null && !misPerimetros.Contains(c))
        {
            misPerimetros.Add(c);
        }

    }
    public void asignarComposicion(Object o)
    {

        ComposicionCorporal c = (ComposicionCorporal) o;

        if (c != null && !misComposicionC.Contains(c))
        {
            misComposicionC.Add(c);
        }

    }

    public void borrarCliente(Cliente id)
    {
        if (id != null)
        {
            misClientes.Remove(id);
        }
    }
    public void borrarPerimetro(Perimetro id)
    {
        if (id != null)
        {
            misPerimetros.Remove(id);
        }
    }

    public void borrarComposicion(ComposicionCorporal id)
    {
        if (id != null)
        {
            misComposicionC.Remove(id);
        }
    }

    public void borrarPregunta(Pregunta pregunta)
    {
        preguntas.Remove(pregunta);
    }





    public async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var maxAllowedFiles = 3;
        var format = "image/png";

        foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
        {


            var resizeFile = await imageFile.RequestImageFileAsync(format, 200, 200);
            var buffer = new byte[resizeFile.Size];

            await resizeFile.OpenReadStream().ReadAsync(buffer);

            imageDataUrl = new();
            imageDataUrl.Image = $"data:{format}; base64,{Convert.ToBase64String(buffer)}";

            if (imageDataUrl != null)
            {
                imageDataUrls.Add(imageDataUrl);

                pregunta.imagenes = imageDataUrls;

                //  imagenCargada = true;
            }
        }

    }


    private async void Guardar()
    {
        if (pregunta.Pregunta1!=null)
        {
            if (imageDataUrls.Count > 0 && imageDataUrl.Image!=null)
            {
                pregunta.imagenes = imageDataUrls;

            }
            preguntas.Add(pregunta);

            pregunta = new Pregunta();

            imageDataUrls = new List<Archivo>();

            //  preguntaEnviada = false;

        }


    }
    public async Task guardarCuestionario()
    {
        if (tipo == 1)
        {
            cuestionario.Tipo = "Revision";
        }
        else
        {
            cuestionario.Tipo = "Bienvenida";
        }
        cuestionario.IdEntrenador = idEntrenador;

        HttpResponseMessage result = null;
        result = await Http.PostAsJsonAsync("https://localhost:7184/api/Cuestionarios", cuestionario);
        cuestionario = await result.Content.ReadFromJsonAsync<Cuestionario>();


        if(misClientes.Count()>0){
            foreach(var c in misClientes) {
                cuestclientes.IdCliente = c.IdCliente;
                cuestclientes.IdCuestionario = cuestionario.IdCuestionario;
                result = await Http.PostAsJsonAsync("https://localhost:7184/api/CuestionarioClientes", cuestclientes);

                foreach(var m in misComposicionC)
                {
                    ComposicionCorporalClient comclient = new ComposicionCorporalClient();
                    comclient.IdComposicion = m.IdComposicion;
                    comclient.Cliente = c;

                    result = await Http.PostAsJsonAsync("https://localhost:7184/api/ComposicionCorporalClients", comclient);

                }
                foreach(var m in misPerimetros)
                {
                    PerimetroDelCliente p = new PerimetroDelCliente();
                    p.Cliente = c;
                    p.IdCliente = c.IdCliente;
                    p.IdPerimetro = m.IdPerimetro;
                    p.IdPerimetroNavigation = m;
                    result = await Http.PostAsJsonAsync("https://localhost:7184/api/PerimetroDelClientes", p);
                }
            }
        }

        if (preguntas.Count() > 0)
        {
            foreach (var p in preguntas)
            {
                p.IdCuestionario = cuestionario.IdCuestionario;
                result = await Http.PostAsJsonAsync("https://localhost:7184/api/Preguntas", p);
                pregunta = await result.Content.ReadFromJsonAsync<Pregunta>();
                if (imageDataUrls.Count() > 0)
                {
                    foreach(var i in imageDataUrls)
                    {
                        i.IdPregunta = pregunta.IdPreguntas;
                        result = await Http.PostAsJsonAsync("https://localhost:7184/api/Archivoes", i);
                    }


                }
            }

        }

        result = await Http.PostAsJsonAsync("https://localhost:7184/api/Clientes", cliente);
        cuestionario = new Cuestionario();
        pregunta = new Pregunta();
        imageDataUrls = new();

        return;
    }

}
